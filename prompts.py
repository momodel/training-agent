"""提示词管理模块"""
from typing import Dict, Any, List
import json

def get_analysis_prompt(dataset_preview: str) -> str:
    """生成数据集分析的提示词"""
    return f"""
    请分析这个数据集，并以 JSON 格式返回以下信息：
    1. data_type: 数据集类型（表格/图像/文本）
    2. task_type: 可能的任务类型（分类/回归/聚类等）
    3. features: 特征说明
    4. target: 目标变量
    5. preprocessing_steps: 建议的预处理步骤
    
    数据集预览：
    {dataset_preview}
    """

def get_theory_prompt(knowledge_points: List[str], dataset_info: Dict[str, Any]) -> str:
    """获取理论内容生成的提示"""
    return f"""作为一个 AI 培训内容生成专家，请基于以下知识点和数据集信息生成一个结构完整的 Jupyter notebook 理论教程。

数据集信息: {json.dumps(dataset_info, ensure_ascii=False)}
知识点: {', '.join(knowledge_points)}

请按照以下结构生成教程内容：

# 背景介绍
- 介绍相关概念的起源和重要性
- 说明这些知识点在实际中的应用场景
- 解释为什么要学习这些知识点

# 理论讲解
- 详细解释每个知识点的原理
- 使用数学公式（LaTeX格式）说明核心概念
- 分析算法或方法的优缺点
- 与其他相关方法进行对比

# 实践应用
- 结合数据集的具体示例
- 实现步骤的详细说明
- 代码示例（使用 ```python 标记）
- 结果分析和解释

注意事项：
1. 每个部分都必须包含详尽的内容，每个知识点至少需要500字的说明
2. 代码示例必须放在单独的代码块中，使用 ```python 和 ``` 标记
3. 重要概念使用加粗标记
4. 适当使用列表和表格组织内容
5. 理论讲解要深入浅出，注重实用性
6. 所有示例必须基于提供的数据集

特别强调：
- 必须包含上述三个主要部分（背景介绍、理论讲解、实践应用）
- 每个部分都要有明确的标题（使用 # 标记）
- 内容要既专业又易于理解
- 确保理论与实践紧密结合

请生成完整的教程内容，确保结构清晰，内容翔实。"""

def get_code_prompt(dataset_info: Dict[str, Any]) -> str:
    """获取代码示例生成的提示"""
    return f"""基于以下数据集信息生成一系列完整的、可执行的代码示例：
数据集信息: {json.dumps(dataset_info, ensure_ascii=False)}

请生成以下几个部分的代码：

1. 数据加载和预处理：
```python
# 导入所需的库
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# 设置中文显示
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

# TODO: 加载数据集
# 你需要实现数据加载的代码
data = ...

# 数据基本信息
print("数据集信息：")
print(data.info())
```

2. 数据探索和可视化：
- 使用 describe() 查看基本统计信息
- 使用 matplotlib 和 seaborn 创建可视化图表
- 添加详细的注释说明每个步骤

3. 特征工程：
- 数据清洗和预处理的代码
- 特征选择和转换
- 使用 sklearn 的相关功能

4. 模型构建：
- 模型初始化和参数设置
- 训练过程
- 模型评估

要求：
1. 代码结构：
   - 每个代码块都要有清晰的注释
   - 使用 TODO 标记需要学习者完成的部分
   - 提供完整的代码和简化版本

2. 代码质量：
   - 遵循 PEP 8 规范
   - 使用有意义的变量名
   - 包含错误处理
   - 代码要简洁且易于理解

3. 可视化：
   - 使用适当的图表类型
   - 添加图表标题和标签
   - 确保图表美观且信息丰富

4. 交互性：
   - 添加可以调整的参数
   - 提供不同的可视化选项
   - 包含实验性的代码块

请确保生成的代码是完整的、可以直接运行的，并且包含充分的注释和说明。"""

def get_exercises_prompt(difficulty_level: str, dataset_info: Dict[str, Any]) -> str:
    """获取练习题生成的提示"""
    return f"""基于以下数据集信息生成一系列具有教学价值的练习题：
数据集信息: {json.dumps(dataset_info, ensure_ascii=False)}
难度级别: {difficulty_level}

请生成 3-5 个练习题，每个练习题都应该包含以下部分：

## 练习 1
### 问题
[详细的问题描述]

### 提示
- 提示 1: ...
- 提示 2: ...
- 提示 3: ...

### 参考答案
[详细的解答过程和说明]

要求：
1. 练习题类型：
   - 编程实现题：需要编写代码解决的问题
   - 思考分析题：需要理论分析的问题
   - 实验探索题：需要调整参数观察结果的问题

2. 难度分布：
   - 基础题：基本概念和方法的应用
   - 进阶题：多个知识点的综合运用
   - 挑战题：需要创新思维的开放性问题

3. 问题设计：
   - 明确的目标和要求
   - 循序渐进的思考过程
   - 结合实际场景的应用
   - 包含必要的数据和条件

4. 提示设计：
   - 分步骤的引导
   - 关键知识点的提醒
   - 可能遇到的问题预警
   - 不直接给出答案

5. 参考答案：
   - 详细的解题思路
   - 完整的代码实现
   - 结果分析和讨论
   - 扩展思考和优化建议

每个练习题都应该：
1. 紧密结合数据集特征
2. 覆盖不同的知识点
3. 包含实际应用场景
4. 有明确的教学目标
5. 提供充分的解释和讨论

请按照这个格式生成练习题，确保每个练习题都是完整的、有教学价值的，并且难度符合要求。"""

def get_content_organization_prompt(content: Dict[str, Any]) -> str:
    """获取内容组织的提示"""
    return f"""
    请将以下内容组织成一个结构化的实训教程。每个代码示例必须放在单独的代码块中，不要将代码放在文本说明中。

    理论内容：
    {content.get('theory', '')}

    代码示例：
    {content.get('code_examples', '')}

    练习题：
    {content.get('exercises', '')}

    要求：
    1. 内容组织：
       - 背景介绍（纯文本）
       - 理论讲解（纯文本）
       - 代码示例（每个示例都要放在单独的代码块中）
       - 实践练习（问题描述用文本，示例代码放在代码块中）

    2. 格式要求：
       - 所有代码必须放在单独的代码块中，使用 ```python 和 ``` 标记
       - 代码块前后必须有说明文本
       - 不要在文本说明中包含代码
       - 每个代码块都应该是完整且可执行的

    3. 代码块规范：
       - 每个代码块都必须以 ```python 开始，以 ``` 结束
       - 代码块中不要包含 Markdown 标记
       - 代码块中的代码要有适当的缩进
       - 每个代码块都要有完整的导入语句

    4. 文本说明规范：
       - 使用 Markdown 标题标记（#）组织层级
       - 每个代码块前要有清晰的说明
       - 理论部分要分段解释
       - 练习题要有明确的要求和提示

    请确保严格遵循以上格式要求，特别是代码块的处理。
    """ 